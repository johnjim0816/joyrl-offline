import torch
import torch.nn as nn
import math
import random
import pickle
import numpy as np
from collections import defaultdict
from algos.base.policies import BasePolicy


class Policy(BasePolicy):
    def __init__(self, cfg):
        # e-greedy, boltzmann, softmax, ucb etc.
        super(Policy, self).__init__(cfg)
        self.n_actions = cfg.action_space.n
        self.exploration_type = 'e-greedy'
        self.lr = cfg.lr
        self.gamma = cfg.gamma
        self.epsilon = cfg.epsilon_start
        self.epsilon_start = cfg.epsilon_start
        self.epsilon_end = cfg.epsilon_end
        self.epsilon_decay = cfg.epsilon_decay
        self.policy_transition = {}
        # use nested dictionary to represent Q(s,a), here set all Q(s,a)=0 initially, not like pseudo code
        self.Q_table = defaultdict(lambda: np.zeros(self.n_actions))
        self.n_planning = cfg.n_planning
        self.create_summary()
        self.model = list()  # environment model

    def get_action(self, state, mode='sample', **kwargs):
        return super().get_action(state, mode, **kwargs)
    
    def sample_action(self, state, **kwargs):
        ''' sample action with e-greedy policy while training
        '''
        self.sample_count = kwargs.get('sample_count')
        if self.exploration_type == 'e-greedy':
            action = self._epsilon_greedy_sample_action(state)
        else:
            raise NotImplementedError
        return action

    def predict_action(self, state):
        ''' predict action while testing 
        '''
        if self.exploration_type == 'e-greedy':
            action = self._epsilon_greedy_predict_action(state)
        else:
            raise NotImplementedError
        return action

    def _epsilon_greedy_sample_action(self, state):
        self.sample_count += 1
        # epsilon must decay(linear,exponential and etc.) for balancing exploration and exploitation
        self.epsilon = self.epsilon_end + (self.epsilon_start - self.epsilon_end) * \
            math.exp(-1. * self.sample_count / self.epsilon_decay)
        if np.random.uniform(0, 1) > self.epsilon:
            # choose action corresponding to the maximum q value
            action = np.argmax(self.Q_table[str(state)])
        else:
            action = np.random.choice(self.n_actions)  # choose action randomly
        return action

    def _epsilon_greedy_predict_action(self, state):
        action = np.argmax(self.Q_table[str(state)])
        return action

    def _update_q_table(self, state, action, reward, next_state, done):
        Q_predict = self.Q_table[str(state)][action]
        if done:  # terminal state
            Q_target = reward
        else:
            Q_target = reward + self.gamma * \
                np.max(self.Q_table[str(next_state)])
        self.Q_table[str(state)][action] += self.lr * (Q_target - Q_predict)

    def learn(self, **kwargs):
        """
        update environment model and q_table
        """
        state, action, reward, next_state, done = kwargs.get('state'), kwargs.get('action'), kwargs.get('reward'), kwargs.get('next_state'), kwargs.get('done')
        self._update_q_table(state, action, reward, next_state, done)
        self.model.append((state, action, reward, next_state))
        # Update the q-table with data generated by the environment model
        for _ in range(self.n_planning):
            # Randomly select a state action pair that has been generated by the environment model
            state, action, reward, next_state = random.choice(
                list(self.model))
            self._update_q_table(state, action, reward, next_state, done)

    def save_model(self,fpath):
        ''' save model
        '''
        with open(f"{fpath}", 'wb') as f:
            pickle.dump(dict(self.Q_table), f)
    def load_model(self, fpath):
        ''' load model
        '''
        with open(fpath, 'rb') as f:
            self.Q_table = pickle.load(f)
